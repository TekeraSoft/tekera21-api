version: '3.8'

services:
  tekera-db:
    image: postgres:latest
    container_name: tekera-db
    ports:
      - "5430:5432"
    environment:
      - POSTGRES_USER=tekera_user
      - POSTGRES_PASSWORD=tekera_pass
      - POSTGRES_DB=tekera-db
    networks:
      - tekera-network
    volumes:
      - tekera_postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    ports:
      - "9200:9200"
    networks:
      - tekera-network
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: >
        bash -c '
          curl -s http://localhost:9200/_cluster/health | grep -q "\"status\":\"green\"" ||
          curl -s http://localhost:9200/_cluster/health | grep -q "\"status\":\"yellow\""
        '
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash
    ports:
      - "5000:5000"
      - "9600:9600"
    volumes:
      - ./logstash:/usr/share/logstash/pipeline
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - tekera-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9600/_node/stats | grep -q '\"events\"'" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=true
      - SERVER_PUBLICBASEURL=https://api.tekera21.com/kibana
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - tekera-network
    volumes:
      - ./tokens:/tokens

  minio1:
    image: minio/minio:latest
    container_name: minio1
    ports:
      - "9003:9000"
      - "9004:9001"
    environment:
      MINIO_ROOT_USER: tekera_user
      MINIO_ROOT_PASSWORD: tekera_pass
    volumes:
      - minio1_data:/data
    command: server --console-address ":9001" /data
    networks:
      - tekera-network

  mc-once1:
    image: minio/mc
    depends_on:
      - minio1
    entrypoint: >
      sh -c "
        echo 'üïí MinIO hazƒ±r mƒ± kontrol ediliyor...' &&
        until mc alias set myminio http://minio1:9000 tekera_user tekera_pass; do
          echo '‚è≥ Bekleniyor...'; sleep 2;
        done &&
        echo '‚úÖ mc alias tamam.' &&
        mc mb myminio/tekera-bucket || true &&
        mc anonymous set download myminio/tekera-bucket &&
        echo '‚úÖ Bucket public yapƒ±ldƒ±.'
      "
    networks:
      - tekera-network
    restart: "no"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - tekera-network
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://0.0.0.0:29092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: "kafka-cluster-1"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8280:8080"
    depends_on:
      - kafka
    networks:
      - tekera-network
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  mind-generator:
    build:
      context: ../mind-generator
    container_name: mind-generator
    ports:
      - "3009:3009"
    networks:
      - tekera-network

  tekera-api:
    build:
      context: .
    container_name: tekera21-api
    depends_on:
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
      tekera-db:
        condition: service_started
      minio1:
        condition: service_started
      kafka:
        condition: service_started
    ports:
      - "9091:8080"
    networks:
      - tekera-network
    restart: unless-stopped

volumes:
  tekera_postgres_data:
  minio1_data:

networks:
  tekera-network:
    driver: bridge