#docker compose up setup !!! bu komutu √ßalƒ±≈ütƒ±rmaz iseniz elasticsearch user ≈üifreleri y√ºklenmez
#docker compose up --build -d

services:
  tekera-db:
    image: postgres:latest
    container_name: tekera-db
    ports:
      - "5430:5432"
    environment:
      - POSTGRES_USER=tekera_user
      - POSTGRES_PASSWORD=tekera_pass
      - POSTGRES_DB=tekera-db
    networks:
      - tekera-network
    volumes:
      - tekera_postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    container_name: tekera-document-db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
    networks:
      - tekera-network


  redis:
    image: redis/redis-stack:latest
    container_name: redis
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_ARGS=--requirepass tekera_pass
    networks:
      - tekera-network


#  tekera-api:
#    build:
#      context: .
#    container_name: tekera-api
#    depends_on:
#      tekera-db:
#        condition: service_started
#      minio1:
#        condition: service_started
#    environment:
#      SPRING_PROFILES_ACTIVE: prod
#      LOGSTASH_HOST: logstash
#      LOGSTASH_PORT: 50000
#    ports:
#      - "9091:8080"
#    networks:
#      - tekera-network
#    restart: unless-stopped

  minio1:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9003:9000"
      - "9004:9001"
    environment:
      MINIO_ROOT_USER: tekera_user
      MINIO_ROOT_PASSWORD: tekera_pass
    volumes:
      - minio1_data:/data
    command: server --console-address ":9001" /data
    networks:
      - tekera-network


  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - tekera-network
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093,PLAINTEXT_HOST://0.0.0.0:29092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: "kafka-cluster-1"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8280:8080"
    depends_on:
      - kafka
    networks:
      - tekera-network
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  mind-generator:
    build:
      context: ../mind-generator
    container_name: mind-generator
    ports:
      - "3009:3009"
    networks:
      - tekera-network

  mc-once1:
    image: minio/mc
    depends_on:
      - minio1
    entrypoint: >
      sh -c "
        echo 'üïí MinIO hazƒ±r mƒ± kontrol ediliyor...' &&
        until mc alias set myminio http://minio1:9000 tekera_user tekera_pass; do
          echo '‚è≥ Bekleniyor...'; sleep 2;
        done &&
        echo '‚úÖ mc alias tamam.' &&
        mc mb myminio/tekera-bucket || true &&
        mc anonymous set download myminio/tekera-bucket &&
        echo '‚úÖ Bucket public yapƒ±ldƒ±.'
      "
    networks:
      - tekera-network
    restart: "no"

  elasticsearch:
    container_name: elasticsearch
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      discovery.type: single-node
    networks:
      - tekera-network
    restart: unless-stopped

  kibana:
    container_name: kibana
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
    networks:
      - tekera-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  logstash:
    container_name: logstash
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
    networks:
      - tekera-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD}
    networks:
      - tekera-network
    depends_on:
      - elasticsearch

volumes:
  tekera_postgres_data:
  minio1_data:
  elasticsearch:
  redis_data:
  mongo_data:

networks:
  tekera-network:
    driver: bridge