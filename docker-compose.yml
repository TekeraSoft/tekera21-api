services:
  # PostgreSQL Database
  tekera-db:
    image: postgres:latest
    container_name: tekera-db
    ports:
      - "5435:5432"  # Host portu ile container portunu eşliyoruz
    environment:
      - POSTGRES_USER=tekera_user
      - POSTGRES_PASSWORD=tekera_pass
      - POSTGRES_DB=tekera-db
    networks:
      - my-network
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Veritabanı verilerini hostta sakla
    restart: unless-stopped  # Sistem yeniden başlarsa veri kaybolmaz

  # MongoDb Database
  tekera-document-db:
    image: mongo
    container_name: tekera-document-db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: tekera_user
      MONGO_INITDB_ROOT_PASSWORD: tekera_pass

  # MinIO (Blob Storage)
  minio:
    image: 'bitnami/minio:latest'
    container_name: tekera-blob-storage
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=tekera_user
      - MINIO_ROOT_PASSWORD=tekera_pass
    volumes:
      - minio_data:/data  # MinIO verilerini hostta sakla
    networks:
      - my-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8180:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka

  mind-generator-api:
    build:
      context: ../mind-generator
    container_name: mind-generator
    ports:
      - "3009:3009"
    networks:
      - my-network

#  arzuamber-api:
#    build:
#      context: .
#    container_name: arzuamber-api
#    depends_on:
#      - arzuamber-db
#      - minio
#    ports:
#      - "9090:8080"
#    networks:
#      - my-network
#    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:

networks:
  my-network:
    driver: bridge  # Aynı ağda çalışan servisler birbirine erişebilsin