services:
  # PostgreSQL Database
  tekera-db:
    image: postgres:latest
    container_name: tekera-db
    ports:
      - "5430:5432"  # Host portu ile container portunu e≈üliyoruz
    environment:
      - POSTGRES_USER=tekera_user
      - POSTGRES_PASSWORD=tekera_pass
      - POSTGRES_DB=tekera-db
    networks:
      - tekera-network
    volumes:
      - tekera_postgres_data:/var/lib/postgresql/data  # Veritabanƒ± verilerini hostta sakla
    restart: unless-stopped  # Sistem yeniden ba≈ülarsa veri kaybolmaz

  # MongoDb Database
#  tekera-document-db:
#    image: mongo
#    container_name: tekera-document-db
#    ports:
#      - "27017:27017"
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: tekera_user
#      MONGO_INITDB_ROOT_PASSWORD: tekera_pass

  # bin/elasticsearch-service-tokens create elastic/kibana kibana-token komut ile kibananƒ±n elastic e baƒülanacaƒüƒ± tokeni olu≈üturur
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - tekera-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_SSL_ENABLED=false
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - tekera-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash
    ports:
      - "5000:5000"  # TCP log i√ßin
    volumes:
      - ./logstash:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - tekera-network

  # MinIO (Blob Storage)
  # mc alias set myminio http://localhost:9000 minioadmin minioadmin ile myminio alias olu≈ütur
  # minio containerine gir mc anonymous set download myminio/tekera-bucket bu komut ile bucket i public yap
  minio1:
    image: minio/minio:latest
    container_name: minio1
    ports:
      - "9003:9000"
      - "9004:9001"
    environment:
      MINIO_ROOT_USER: tekera_user
      MINIO_ROOT_PASSWORD: tekera_pass
    volumes:
      - minio1_data:/data
    command: server --console-address ":9001" /data
#    command: server --console-address ":9001" http://minio{1...4}/data
    networks:
      - tekera-network


  mc-once1:
    image: minio/mc
    depends_on:
      - minio1
    entrypoint: >
      sh -c "
          echo 'üïí MinIO hazƒ±r mƒ± kontrol ediliyor...' &&
          until mc alias set myminio http://minio1:9000 tekera_user tekera_pass; do
            echo '‚è≥ Bekleniyor...'; sleep 2;
          done &&
          echo '‚úÖ mc alias tamam.' &&

          mc mb myminio/tekera-bucket || true &&
          mc anonymous set download myminio/tekera-bucket &&
          echo '‚úÖ Bucket public yapƒ±ldƒ±.'
        "
    networks:
      - tekera-network
    restart: "no"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - tekera-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - tekera-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8280:8081"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka

  mind-generator:
    build:
      context: ../mind-generator
    container_name: mind-generator
    ports:
      - "3009:3009"
    networks:
      - tekera-network

  tekera-api:
    build:
      context: .
    container_name: tekera21-api
    depends_on:
      - tekera-db
      - minio1
      - elasticsearch
      - logstash
      - kafka
    ports:
      - "9091:8080"
    networks:
      - tekera-network
    restart: unless-stopped

volumes:
  tekera_postgres_data:
  minio1_data:

networks:
  tekera-network:
    driver: bridge  # Aynƒ± aƒüda √ßalƒ±≈üan servisler birbirine eri≈üebilsin